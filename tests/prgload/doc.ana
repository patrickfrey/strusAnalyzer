[Attribute]
    title = text content /list/doc/title();
    docid = text content /list/doc/docid();

[Document]
    doc = /list/doc;

[Content]
    "application/json; charset=UTF-8" /list/doc/embedded();

[SearchIndex]
    start = empty content /list/doc/text;
    para = empty content /list/doc/text/h1;
    sent = empty content {position=unique} /list/doc/text/h1~;
    sent = empty content {position=unique} /list/doc/text//li~;
    sent = empty content {position=unique} /list/doc/title~;
    punct= empty punctuation("en",",") {position=unique} /list/doc/text//();
    punct= empty punctuation("en",",") {position=unique} /list/doc/embedded()/text//();
    sent = empty punctuation("en","")  {position=unique} /list/doc/text//();
    sent = empty punctuation("en","")  {position=unique} /list/doc/embedded()/text//();
    stem = lc:convdia(en):stem(en) word /list/doc/title();
    stem = lc:convdia(en):stem(en) word /list/doc/text//();
    stem = lc:convdia(en):stem(en) word /list/doc/embedded()/title//();
    stem = lc:convdia(en):stem(en) word /list/doc/embedded()/text//();
    tist = lc:convdia(en):stem(en) word /list/doc/title();
    uwrd <- upcaseword uc:convdia(en);

[ForwardIndex]
    orig = orig split /list/doc/text//();
    orig = orig split /list/doc/title();

[Aggregator]
    title_start = minpos( tist);
    title_end = nextpos( tist);
    doclen = count( stem);

[PatternMatch test]
    upcaseword = { "/list/doc/text//()", "/list/doc/title//()" } "detect_upcase.rul";

